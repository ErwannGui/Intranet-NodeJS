<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--<link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">-->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel='stylesheet' href='/assets/materialize/css/materialize.min.css' />
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <!--<link rel="stylesheet" href="/assets/charts/apexcharts/custom/style.css">-->
  </head>
  <body>

    <header>
        <% include ./partials/header %>
    </header>

    <main>
      <ul class="tabs">
        <li class="tab col s3"><a class="active" href="#charts">Graphiques</a></li>
        <li class="tab col s3"><a href="#list">Liste de données</a></li>
      </ul>
      <div id="charts" class="col s12">
        <ul class="collapsible popout expandable">
          <li>
            <div class="collapsible-header"><i class="material-icons">arrow_drop_down_circle</i>Unité 1</div>
            <div class="collapsible-body row dynamic-data-container">
              <div class="col s10 offset-s1 l8 offset-l2 row">
                <div class="s12">
                  <h2>Température Int</h2>
                  <div id="linechart-temp-int"> </div>
                </div>
                <div class="s12">
                  <h2>Température Ext</h2>
                  <div id="linechart-temp-ext"> </div>
                </div>
                <div class="s12">
                  <h2>Poids lait</h2>
                  <div id="linechart-weight-milk"> </div>
                </div>
                <div class="s12">
                  <h2>Poids produit fini</h2>
                  <div id="linechart-weight-product"> </div>
                </div>

                <div class="s12">
                  <h2>Taux bactérien</h2>
                  <div id="columnchart-bact"> </div>
                </div>

                <!--<div class="s12">
                  <h2>PH</h2>
                  <div id="linechart-ph"> </div>
                </div>
                <div class="s12">
                  <h2>Taux K+</h2>
                  <div id="linechart-potassium"> </div>
                </div>
                <div class="s12">
                  <h2>Concentration NaCl</h2>
                  <div id="linechart-nacl"> </div>
                </div>
                <div class="s12">
                  <h2>Niveau de salmonelle</h2>
                  <div id="linechart-salmonelle"> </div>
                </div>
                <div class="s12">
                  <h2>Niveau de bactérie E-coli</h2>
                  <div id="linechart-ecoli"> </div>
                </div>
                <div class="s12">
                  <h2>Niveau de bactérie Listéria</h2>
                  <div id="linechart-listeria"> </div>
                </div>-->
              </div>
            </div>
          </li>
          <li>
            <div class="collapsible-header"><i class="material-icons">arrow_drop_down_circle</i>Unité 2</div>
            <div class="collapsible-body">
            </div>
          </li>
          <li>
            <div class="collapsible-header"><i class="material-icons">arrow_drop_down_circle</i>Unité 3</div>
            <div class="collapsible-body">
            </div>
          </li>
          <!--<li>
            <div class="collapsible-header"><i class="material-icons">arrow_drop_down_circle</i>Unité 4</div>
            <div class="collapsible-body">
            </div>
          </li>
          <li>
            <div class="collapsible-header"><i class="material-icons">arrow_drop_down_circle</i>Unité 5</div>
            <div class="collapsible-body">
            </div>
          </li>-->
        </ul>
      </div>
      <div id="list" class="col s12">
        <ul class="collapsible popout expandable">
          <li>
            <div class="collapsible-header"><i class="material-icons">arrow_drop_down_circle</i>Unité 1</div>
            <div class="collapsible-body material-table">
              <div class="table-header">
                <span class="table-title">Datatable unité 1</span>
                <div class="actions">
                  <a href="#" class="search-toggle waves-effect btn-flat nopadding"><i class="material-icons">search</i></a>
                </div>
              </div>
              <table class="highlight responsive-table datatable">
                <thead>
                  <tr>
                    <th>Numéro d'automate</th>
                    <th>Type d'automate</th>
                    <th>Température int</th>
                    <th>Température ext</th>
                    <th>Poids lait</th>
                    <th>Poids produit</th>
                    <th>PH</th>
                    <th>Taux K+</th>
                    <th>Concentration NaCl</th>
                    <th>Niveau salmonelle</th>
                    <th>Niveau E-coli</th>
                    <th>Niveau Listéria</th>
                    <th>TimeStamp</th>
                  </tr>
                </thead>
                <tbody>
                  <% for(var i=0; i < JSON.parse(data).length; i++) { %>
                  <% if(JSON.parse(data)[i].num_unite == 1) { %>
                    <tr>
                      <td><%= JSON.parse(data)[i].num_automate %></td>
                      <td style="text-transform: uppercase"><%= parseInt(JSON.parse(data)[i].type_automate).toString(16) %></td>
                      <td><%= JSON.parse(data)[i].temp_int %></td>
                      <td><%= JSON.parse(data)[i].temp_ext %></td>
                      <td><%= JSON.parse(data)[i].weight_milk %></td>
                      <td><%= JSON.parse(data)[i].weight_product %></td>
                      <td><%= JSON.parse(data)[i].ph %></td>
                      <td><%= JSON.parse(data)[i].potassium %></td>
                      <td><%= JSON.parse(data)[i].nacl %></td>
                      <td><%= JSON.parse(data)[i].salmonelle %></td>
                      <td><%= JSON.parse(data)[i].e_coli %></td>
                      <td><%= JSON.parse(data)[i].listeria %></td>
                      <td><%= JSON.parse(data)[i].time %></td>
                    </tr>
                  <% } %>
                  <% } %>
                </tbody>
              </table>
            </div>
          </li>
          <li>
            <div class="collapsible-header"><i class="material-icons">arrow_drop_down_circle</i>Unité 2</div>
            <div class="collapsible-body material-table">
              <div class="table-header">
                <span class="table-title">Datatable unité 2</span>
                <div class="actions">
                  <a href="#" class="search-toggle waves-effect btn-flat nopadding"><i class="material-icons">search</i></a>
                </div>
              </div>
              <table class="highlight responsive-table datatable">
                <thead>
                <tr>
                  <th>Numéro d'automate</th>
                  <th>Type d'automate</th>
                  <th>Température int</th>
                  <th>Température ext</th>
                  <th>Poids lait</th>
                  <th>Poids produit</th>
                  <th>PH</th>
                  <th>Taux K+</th>
                  <th>Concentration NaCl</th>
                  <th>Niveau salmonelle</th>
                  <th>Niveau E-coli</th>
                  <th>Niveau Listéria</th>
                  <th>TimeStamp</th>
                </tr>
                </thead>
                <tbody>
                <% for(var i=0; i < JSON.parse(data).length; i++) { %>
                <% if(JSON.parse(data)[i].num_unite == 2) { %>
                <tr>
                  <td><%= JSON.parse(data)[i].num_automate %></td>
                  <td style="text-transform: uppercase"><%= parseInt(JSON.parse(data)[i].type_automate).toString(16) %></td>
                  <td><%= JSON.parse(data)[i].temp_int %></td>
                  <td><%= JSON.parse(data)[i].temp_ext %></td>
                  <td><%= JSON.parse(data)[i].weight_milk %></td>
                  <td><%= JSON.parse(data)[i].weight_product %></td>
                  <td><%= JSON.parse(data)[i].ph %></td>
                  <td><%= JSON.parse(data)[i].potassium %></td>
                  <td><%= JSON.parse(data)[i].nacl %></td>
                  <td><%= JSON.parse(data)[i].salmonelle %></td>
                  <td><%= JSON.parse(data)[i].e_coli %></td>
                  <td><%= JSON.parse(data)[i].listeria %></td>
                  <td><%= JSON.parse(data)[i].time %></td>
                </tr>
                <% } %>
                <% } %>
                </tbody>
              </table>
            </div>
          </li>
          <li>
            <div class="collapsible-header"><i class="material-icons">arrow_drop_down_circle</i>Unité 3</div>
            <div class="collapsible-body material-table">
              <div class="table-header">
                <span class="table-title">Datatable unité 3</span>
                <div class="actions">
                  <a href="#" class="search-toggle waves-effect btn-flat nopadding"><i class="material-icons">search</i></a>
                </div>
              </div>
              <table class="highlight responsive-table datatable">
                <thead>
                <tr>
                  <th>Numéro d'automate</th>
                  <th>Type d'automate</th>
                  <th>Température int</th>
                  <th>Température ext</th>
                  <th>Poids lait</th>
                  <th>Poids produit</th>
                  <th>PH</th>
                  <th>Taux K+</th>
                  <th>Concentration NaCl</th>
                  <th>Niveau salmonelle</th>
                  <th>Niveau E-coli</th>
                  <th>Niveau Listéria</th>
                  <th>TimeStamp</th>
                </tr>
                </thead>
                <tbody>
                <% for(var i=0; i < JSON.parse(data).length; i++) { %>
                <% if(JSON.parse(data)[i].num_unite == 3) { %>
                <tr>
                  <td><%= JSON.parse(data)[i].num_automate %></td>
                  <td style="text-transform: uppercase"><%= parseInt(JSON.parse(data)[i].type_automate).toString(16) %></td>
                  <td><%= JSON.parse(data)[i].temp_int %></td>
                  <td><%= JSON.parse(data)[i].temp_ext %></td>
                  <td><%= JSON.parse(data)[i].weight_milk %></td>
                  <td><%= JSON.parse(data)[i].weight_product %></td>
                  <td><%= JSON.parse(data)[i].ph %></td>
                  <td><%= JSON.parse(data)[i].potassium %></td>
                  <td><%= JSON.parse(data)[i].nacl %></td>
                  <td><%= JSON.parse(data)[i].salmonelle %></td>
                  <td><%= JSON.parse(data)[i].e_coli %></td>
                  <td><%= JSON.parse(data)[i].listeria %></td>
                  <td><%= JSON.parse(data)[i].time %></td>
                </tr>
                <% } %>
                <% } %>
                </tbody>
              </table>
            </div>
          </li>
          <!--<li>
            <div class="collapsible-header"><i class="material-icons">arrow_drop_down_circle</i>Unité 4</div>
            <div class="collapsible-body"><span>Lorem ipsum dolor sit amet.</span></div>
          </li>
          <li>
            <div class="collapsible-header"><i class="material-icons">arrow_drop_down_circle</i>Unité 5</div>
            <div class="collapsible-body"><span>Lorem ipsum dolor sit amet.</span></div>
          </li>-->
        </ul>
      </div>
    </main>

  </body>

  <script
          src="https://code.jquery.com/jquery-3.4.1.min.js"
          integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
          crossorigin="anonymous"></script>
  <script type='text/javascript' src='/assets/materialize/js/materialize.min.js'></script>

  <!-- APEXCHARTS LIBS -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/apexcharts@latest"></script>

  <!-- DATATABLE LIBS -->
  <script type="text/javascript" src="https://cdn.datatables.net/1.10.7/js/jquery.dataTables.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.3.1/js/buttons.html5.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.3.1/js/buttons.print.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.3.1/js/dataTables.buttons.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>

  <script type="text/javascript" src="/javascripts/script.js"></script>
  <script type="text/javascript">

    /* ----- APEXCHARTS ----- */

    window.Apex = {
      chart: {
        foreColor: '#fff',
        toolbar: {
          show: true
        },
      },
      colors: ['#FCCF31', '#17ead9', '#f02fc2', '#00c853', '#b71c1c'],
      stroke: {
        width: 3
      },
      dataLabels: {
        enabled: false
      },
      grid: {
        borderColor: "#40475D",
      },
      xaxis: {
        axisTicks: {
          color: '#333'
        },
        axisBorder: {
          color: "#333"
        }
      },
      fill: {
        type: 'gradient',
        gradient: {
          gradientToColors: ['#F55555', '#6078ea', '#6094ea']
        },
      },
      tooltip: {
        theme: 'dark',
        x: {
          formatter: function (val) {
            return moment(new Date(val)).format("HH:mm:ss")
          }
        }
      },
      yaxis: {
        decimalsInFloat: 1,
        opposite: true,
        labels: {
          offsetX: -10
        }
      }
    };

    var trigoStrength = 3;
    var iteration = 11;
    var optionsLine = {};
    var optionsColumn = {};

    function getRandom() {
      var i = iteration;
      return (Math.sin(i / trigoStrength) * (i / trigoStrength) + i / trigoStrength + 1) * (trigoStrength * 2)
    }

    function getRangeRandom(yrange) {
        return Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min
    }

    function getNewData(baseval, yrange) {
      var newTime = baseval + 300000;
      /*return {
        x: newTime,
        y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min
      }*/
      /* ----- En attendant l'appel d'API fonctionnel, les données random sont générées ----- */
      return (Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min);
    }

    function generateMinuteWiseTimeSeries(baseval, count, automator) {
      var i = 0;
      var series = [];
      while (i < count) {
        var x = baseval;
        // var y = 0;
        var y = ((Math.sin(i / trigoStrength) * (i / trigoStrength) + i / trigoStrength + 1) * (trigoStrength * 2)) / 10;
        console.log(y);

        series.push([x, y]);
        baseval += 300000;
        i++;
      }
      return series;
    }

    function getDataByChart(id, baseval, automate) {
        var series = [];
        <% for(var i=0; i < JSON.parse(data).length; i++) { %>
        var num_unit = <%- JSON.parse(data)[i].num_unite %>;
        var num_automate = <%- JSON.parse(data)[i].num_automate %>;
        var x = baseval;
        if (num_unit == 1 && num_automate === automate) {
            if(id === "linechart-temp-int") {
                var y = <%- JSON.parse(data)[i].temp_int %>;
                series.push([x, y]);
            }
            else if(id === "linechart-temp-ext") {
                var y = <%- JSON.parse(data)[i].temp_ext %>;
                series.push([x, y]);
            }
            else if(id === "linechart-weight-milk") {
                var y = <%- JSON.parse(data)[i].weight_milk %>;
                series.push([x, y]);
            }
            else if(id === "linechart-weight-product") {
                var y = <%- JSON.parse(data)[i].weight_product %>;
                series.push([x, y]);
            }
        }
        baseval += 60000;
        <% } %>
        console.log(series.slice(-12));
        return series.slice(-12);
    }

    function createLineChart(id) {
        var time = new Date().getTime();
        optionsLine = {
            chart: {
                height: 350,
                type: 'line',
                stacked: true,
                animations: {
                    enabled: true,
                    easing: 'linear',
                    dynamicAnimation: {
                        speed: 1000
                    }
                },
                dropShadow: {
                    enabled: true,
                    opacity: 0.3,
                    blur: 5,
                    left: -7,
                    top: 22
                },
                events: {
                    animationEnd: function (chartCtx) {
                        const newData1 = chartCtx.w.config.series[0].data.slice()
                        newData1.shift()
                        const newData2 = chartCtx.w.config.series[1].data.slice()
                        newData2.shift()
                        /*const newData3 = chartCtx.w.config.series[2].data.slice()
                        newData3.shift()*/
                        window.setTimeout(function () {
                            chartCtx.updateOptions({
                                series: [{
                                    data: newData1
                                }, {
                                    data: newData2
                                }/*, {
                                    data: newData3
                                }*/],
                                subtitle: {
                                    text: parseInt(getRangeRandom({min: 1, max: 100})).toString(),
                                }
                            }, false, false)
                        }, 300)
                    }
                },
                toolbar: {
                    show: true
                },
                zoom: {
                    enabled: false
                }
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                curve: 'straight',
                width: 5,
            },
            grid: {
                padding: {
                    left: 0,
                    right: 0
                }
            },
            markers: {
                size: 0,
                hover: {
                    size: 2
                }
            },
            series: [
                {
                    name: 'Automate 1',
                    data: getDataByChart(id, time, 1)
                }, {
                    name: 'Automate 2',
                    data: getDataByChart(id, time, 2)
                }/*, {
                    name: 'Automate 3',
                    data: getDataByChart(id, new Date().getTime(), 3)
                }*/],
            xaxis: {
                type: 'datetime',
                range: 540000
            },
            title: {
                text: 'Mesures',
                align: 'left',
                style: {
                    fontSize: '12px'
                }
            },
            subtitle: {
                text: '20',
                floating: true,
                align: 'right',
                offsetY: 0,
                style: {
                    fontSize: '22px'
                }
            },
            legend: {
                show: true,
                floating: true,
                horizontalAlign: 'left',
                onItemClick: {
                    toggleDataSeries: false
                },
                position: 'top',
                offsetY: -33,
                offsetX: 60
            }
        };

        var chartLine = new ApexCharts(
            document.querySelector("#"+id),
            optionsLine
        );
        chartLine.render();

        return chartLine;
    }

    function getColumnData(baseval, type) {
        var series = [];
        <% for(var i=0; i < JSON.parse(data).length; i++) { %>
        var num_unit = <%- JSON.parse(data)[i].num_unite %>;
        var num_automate = <%- JSON.parse(data)[i].num_automate %>;
        var x = baseval;
        if (num_unit == 1 && num_automate == 1) {
            if(type === "salmonelle") {
                var y = <%- JSON.parse(data)[i].salmonelle %>;
                series.push([x, y]);
            }
            else if(type === "ecoli") {
                var y = <%- JSON.parse(data)[i].e_coli %>;
                series.push([x, y]);
            }
            else if(type === "listeria") {
                var y = <%- JSON.parse(data)[i].listeria %>;
                series.push([x, y]);
            }
        }
        baseval += 60000;
        <% } %>
        console.log(series.slice(-12));
        return series.slice(-12);
    }

    function createBarChart(id) {
        optionsColumn = {
            chart: {
                height: 350,
                type: 'bar',
                animations: {
                    enabled: true,
                    easing: 'linear',
                    dynamicAnimation: {
                        speed: 1000
                    }
                },
                dropShadow: {
                  enabled: true,
                  left: -14,
                  top: -10,
                  opacity: 0.05
                },
                events: {
                    animationEnd: function (chartCtx) {
                        const newData1 = chartCtx.w.config.series[0].data.slice()
                        newData1.shift();
                        const newData2 = chartCtx.w.config.series[1].data.slice()
                        newData2.shift();
                        /*const newData3 = chartCtx.w.config.series[2].data.slice()
                        newData3.shift();*/
                        window.setTimeout(function () {
                            chartCtx.updateOptions({
                                series: [{
                                    data: newData1
                                }, {
                                    data: newData2
                                }/*,{
                                    data: newData3
                                }*/],
                                xaxis: {
                                    min: chartCtx.minX,
                                    max: chartCtx.maxX
                                },
                                subtitle: {
                                    text: parseInt(getRangeRandom({min: 1, max: 20})).toString() + '%',
                                }
                            }, false, false)
                        }, 300)
                    }
                },
                toolbar: {
                    show: false
                },
                zoom: {
                    enabled: false
                }
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                width: 0,
            },
            series: [{
                name: 'Salmonelle',
                data: getColumnData(new Date().getTime(), "salmonelle")
            }, {
                name: 'E-coli',
                data: getColumnData(new Date().getTime(), "ecoli")
            }, {
                name: 'Listéria',
                data: getColumnData(new Date().getTime(), "listeria")
            }],
            title: {
                text: 'Mesures',
                align: 'left',
                style: {
                    fontSize: '12px'
                }
            },
            subtitle: {
                text: '20%',
                floating: true,
                align: 'right',
                offsetY: 0,
                style: {
                    fontSize: '22px'
                }
            },
            fill: {
                type: 'gradient',
                gradient: {
                    shade: 'dark',
                    type: 'vertical',
                    shadeIntensity: 0.5,
                    inverseColors: false,
                    opacityFrom: 1,
                    opacityTo: 0.8,
                    stops: [0, 100]
                }
            },
            xaxis: {
                type: 'datetime',
                range: 540000
            },
            legend: {
                show: true,
                floating: true,
                horizontalAlign: 'left',
                onItemClick: {
                    toggleDataSeries: false
                },
                position: 'top',
                offsetY: -33,
                offsetX: 60
            },
        };

        var chartColumn = new ApexCharts(
            document.querySelector("#" + id),
            optionsColumn
        );
        chartColumn.render();

        return chartColumn;
    }

    var chartLine_temp_int = createLineChart("linechart-temp-int");

    var chartLine_temp_ext = createLineChart("linechart-temp-ext");

    var chartLine_weight_milk = createLineChart("linechart-weight-milk");

    var chartLine_weight_product = createLineChart("linechart-weight-product");

    var chartColumn_bact = createBarChart("columnchart-bact");

    window.setInterval(function () {

      iteration++;
      // var new_data = getNewData();

      chartLine_temp_int.updateSeries([{
        data: [...chartLine_temp_int.w.config.series[0].data,
          [
            chartLine_temp_int.w.globals.maxX + 60000,
            getNewData(new Date().getTime(), {min: 2, max: 5})
          ]
        ]
      },
      {
        data: [...chartLine_temp_int.w.config.series[1].data,
          [
            chartLine_temp_int.w.globals.maxX + 60000,
            getNewData(new Date().getTime(), {min: 2, max: 5})
          ]
        ]
      }])

        chartLine_temp_ext.updateSeries([{
            data: [...chartLine_temp_ext.w.config.series[0].data,
                [
                    chartLine_temp_ext.w.globals.maxX + 60000,
                    getNewData(new Date().getTime(), {min: 8, max: 14})
                ]
            ]
        },
        {
            data: [...chartLine_temp_ext.w.config.series[1].data,
                [
                    chartLine_temp_ext.w.globals.maxX + 60000,
                    getNewData(new Date().getTime(), {min: 8, max: 14})
                ]
        ]
        }])

        chartLine_weight_milk.updateSeries([{
            data: [...chartLine_weight_milk.w.config.series[0].data,
            [
            chartLine_weight_milk.w.globals.maxX + 60000,
            getNewData(new Date().getTime(), {min: 3512, max: 4607})
    ]
    ]
    },
        {
            data: [...chartLine_weight_milk.w.config.series[1].data,
                [
                    chartLine_weight_milk.w.globals.maxX + 60000,
                    getNewData(new Date().getTime(), {min: 3512, max: 4607})
                ]
        ]
        }])

        chartLine_weight_product.updateSeries([{
            data: [...chartLine_weight_product.w.config.series[0].data,
            [
            chartLine_weight_product.w.globals.maxX + 60000,
            getNewData(new Date().getTime(), {min: 0, max: 1095})
    ]
    ]
    },
        {
            data: [...chartLine_weight_product.w.config.series[1].data,
                [
                    chartLine_weight_product.w.globals.maxX + 60000,
                    getNewData(new Date().getTime(), {min: 0, max: 1095})
                ]
        ]
        }])


        chartColumn_bact.updateSeries([{
            data: [...chartColumn_bact.w.config.series[0].data,
            [
            chartColumn_bact.w.globals.maxX + 60000,
            getNewData(new Date().getTime(), {min: 17, max: 37})
            ]
          ]
        },
        {
            data: [...chartColumn_bact.w.config.series[1].data,
                [
                    chartColumn_bact.w.globals.maxX + 60000,
                    getNewData(new Date().getTime(), {min: 35, max: 49})
                ]
        ]
        },
        {
            data: [...chartColumn_bact.w.config.series[2].data,
                [
                    chartColumn_bact.w.globals.maxX + 60000,
                    getNewData(new Date().getTime(), {min: 28, max: 54})
                ]
        ]
        }])

    }, 3000)
  </script>

</html>
